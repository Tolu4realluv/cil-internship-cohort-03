HOW SERVERLESS COMPUTING CAN BENEFIT STARTUP
Serverless computing is a cloud computing execution model in which the cloud provider allocates machine resources on demand, taking care of the servers on behalf of their customers. "Serverless" is a misnomer in the sense that servers are still used by cloud service providers to execute code for developers.
Benefits of Serverless Architecture
1)	Deploy in Minutes
Serverless architecture brings with it the benefit of faster deployment. While IaaS can take days and months, serverless applications can be deployed within minutes. Moreover, concurrent uses of that same function can happen within milliseconds. This is perfect for cash-trapped startups as it provides flexible computing needs. 
2)	Infrastructure Cost Savings
A large transport organization I know personally shifted to serverless architecture as a solution to their problem of unpredictable and slow response times between databases. This not only enabled real-time operation but also facilitated real-time reporting and analytics.
Moreover, this created a centralised source of sales data. This had a significant reduction in redundant data in their repository due to lack of consistency. As a result, the organisation saved $340,000 annually by cutting money spent on maintenance and support for the existing systems.
3)	Pay per Millisecond
While your traditional dedicated server might be spinning and running and charging you 24*7 irrespective of whether anybody uses it or not. However, this is not the case with serverless architecture.
For example, if I use my server 2 minutes in the morning, 4 minutes in the afternoon and 1 minute in the evening, it will charge me exactly for 7 minutes or 420,000 milliseconds, no less and no more
4)	Language of your Choice
Hiring a variety of developers for language specific servers isnâ€™t a feasible option for startups, is it? However, these are the thing of past and use of multiple language is viable within serverless architecture.
You can have a python developer, node.js developer and C# developer, all working together for a single goal and no one of them will be required to learn a new language at all!



DIFFERENCE BETWEEN USERS, ROLES, PERMISSIONS, POLICIES, AND GROUPS
Users: An IAM user is an account which can be used by a person or an application. This is an actual account registered into the AWS IAM platform. This means that this is a person/application that is an actual entity. Note that this entity can do nothing, just an existence. Like when I signup for an application, my user entity is created and I can log in with provided credentials and have a profile.
Roles: This is like a title with specific responsibilities, i.e. a group of policies(permissions/access) that anyone with this title will have. For example, if we have a title of "Note-Taker", anyone from different departments can be assigned this title temporarily for a meeting, a period etc. And only those with this permission will be able to access the note-taking app. However, we can have some roles that will fit well with a group, e.g. all members of the accounting department can have the title of an accountant, which gives access to the books of account. But we can have another title of director, which has access to delete books of account, and this will cut across all departments.
IAM Group: This is a collection of specific users. Although this can also give identity, the focus is on the specific individuals that make the group. For example, how we group employees into departments in organizations based on their specific specialities and skillsets.
IAM Policies: This is a specific rule/permission/access to a resource spelt out in clear dos and don'ts in a JSON format. Each policy is about a particular resource. A resource can be anything from an EBS volume, a Lamda Function, or even IAM itself.
Permissions: Permissions let you specify access to AWS resources. Permissions are granted to IAM entities (users, groups, and roles) and by default these entities start with no permissions. In other words, IAM entities can do nothing in AWS until you grant them your desired permissions.
AWS AppSync
AWS AppSync is a new service in Public Preview that enables you to manage and update mobile app data in real-time between devices and the cloud, and allows apps to interact with the data on the mobile device when it is offline. With AWS AppSync, applications can easily access AWS services using a data language called GraphQL and an SDK that is optimized for mobile and web applications. GraphQL is an open standard that lets you request, change, and subscribe to the exact data you need in a single network request. This makes prototyping and building data intensive applications as simple as writing a few lines of code.
AWS AppSync lets you quickly and easily prototype and build apps that deliver real-time collaborative experiences in browsers and mobile apps that remain usable even when network connectivity is lost. GraphQL queries and mutations can be used when the client is connected or disconnected from the network, including optimistic UI updates. GraphQL subscriptions can be used for clients to get real-time data updates between connected devices and the cloud.
AWS AppSync integrates into popular mobile application frameworks including iOS, Android and JavaScript, and automatically enables your apps for real-time and offline functionality. You can select which data is automatically synchronized to each user's device when changes are made, optimizing the user experience and minimizing storage and bandwidth requirements. With AWS AppSync, your app can access data in Amazon DynamoDB, trigger AWS Lambda functions, or run Amazon Elasticsearch queries. AWS AppSync also integrates with AWS Identity and Access Management and Amazon Cognito User Pools, so you can set fine grained permissions on GraphQL operations and keep users and app data secure.

